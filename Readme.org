* Introduction
  + Updated 2022-04-04T14:56:36-07:00
  + Usage page for nexo-koinly-csv at https://github.com/troywill/nexo-koinly-csv/blob/main/USAGE.org
  + This is a utility written in Perl to fix and reformat a Nexo transaction CSV export to a CSV file readable by Koinly.
  + It is necessary as of 2022-04-02T23:44:30-07:00. Ideally the need for this program will be very short lived!
  + This program was written by following the excellent Koinly documentation at
  https://help.koinly.io/en/articles/3662999-how-to-create-a-custom-csv-file-with-your-data
  You can see a Koinly template at https://docs.google.com/spreadsheets/d/1dESkilY70aLlo18P3wqXR_PX1svNyAbkYiAk2tBPJng/edit#gid=0

** This program fixes 3 problems in the Nexo CSV export.

*** Problem 1: Duplicate data fields in Deposits and Withdrawals.
    Here is a data row in a Nexo CSV deposit transaction (edited for readability)
    | Transaction | Type    | Input Currency |  Input Amount | Output Currency | Output Amount |
    |-------------+---------+----------------+---------------+-----------------+---------------+
    | NXT.......M | Deposit | MATIC          | 1882.25266872 | MATIC           | 1882.25266872 |

    Nexo incorrectly populates the Output Currency and Amount. A deposit transaction has no output.

    Here's the same data row after processed by my program:
    | Transaction | Type    | Input Currency |  Input Amount | Output Currency | Output Amount |
    |-------------+---------+----------------+---------------+-----------------+---------------|
    | NXT.......M | Deposit | MATIC          | 1882.25266872 |                 |               |

    This transaction will now load into Koinify because Output Currency and Output Amount are empty.
*** Problem 2: Improper and incorrect fields in exchange transactions
    Here is a data row in a Nexo CSV exchange transaction (edited for readability)
    | Transaction | Type     | Input Currency | Input Amount   | Output Currency | Output Amount |
    |-------------+----------+----------------+----------------+-----------------+---------------+
    | NXT.......r | Exchange | USDC/BNB       | BNB 2.45493262 | BNB             |    2.45493262 |
    Nexo garbles the Input Currency field and puts garbage in the input amount.
    Here's the same data row after processed by my program:
    | Transaction | Type     | Input Currency | Input Amount | Output Currency | Output Amount |
    |-------------+----------+----------------+--------------+-----------------+---------------|
    | NXT.......r | Exchange | USDC           | ?            | BNB             |    2.45493262 |
    Please notice my program puts a '?' placeholder into the 'Input Amount' field. This is to indicate
    the that you have to look up the input amount on your transactions page in your Nexo web interface and manually
    enter this value into the CSV file row of the CSV file produced by my program.
*** Problem 3: Nexo's undocumented use of Central European Time (CET) time zone.
    Nexo expects time values in UST time. Nexo uses CET time.
    Here is a data row in a Nexo CSV deposit transaction (edited for readability)
    | Date / Time         | Transaction | Type    |
    |---------------------+-------------+---------|
    | 2022-03-28 18:49:14 | NXT.......M | Deposit |
    Note that Nexo doesn't indicate the timezone even thought it is using a non standard CET time zone for the 'Date / Time' field.
    Here's the same data row after processed by my program:
    | Date / Time               | Transaction | Type    |
    |---------------------------+-------------+---------|
    | 2022-03-28 18:49:14+01:00 | NXT.......M | Deposit |

** Data field mapping from Nexo to Koinify
   Here are the data fields in the current Nexo CSV format (edited for readability):
   | Transaction | Type | Currency | Amount | USD Equivalent | Details | Outstanding Loan | Date / Time |

* The nexo-koinly-csv Perl program
  #+begin_src perl :tangle nexo-koinly-csv :shebang #!/usr/bin/env perl
    # version 0.10
    # updated 2022-04-05T13:13:14-07:00
    use v5.30.0;
    my $nexo_csv_file = $ARGV[0] or die "Please supply Nexo CSV file";
    open( my $fh_csv, '<', $nexo_csv_file ) or die "$!: Can't find $nexo_csv_file";
    open( my $fh_warnings, '>', 'WARNINGS' ) or warn "$!: Unable to open WARNINGS file";
    open( my $fh_exchanges_wrong_inputs, '>', 'EXCH.TXT' ) or warn "$!: Unable to open EXCH.TXT for output";

    my $USE_EXCHANGE = 0;
    my @exchange_transactions = ();
    if ($ARGV[1] eq 'EXCHANGES.TXT') {
	open( my $fh_exchanges_correct_inputs, '<', 'EXCHANGES.TXT' ) or die "$!: I was unable to open EXCHANGES.TXT file with correct input amounts";
	$USE_EXCHANGE = 1;
	while (<$fh_exchanges_correct_inputs>) {
	    chomp;
	    push @exchange_transactions, $_;
	}
	close($fh_exchanges_correct_inputs) or warn "$!: Unable to close file";
    }

    my $header_line = <$fh_csv>; # Throw away the Nexo column header line

    my $new_header_line = "Date,Sent Amount,Sent Currency,Received Amount,Received Currency,Label,TxHash,Description,NexoID,Type";
    # say "$date_time_with_tz,$output_amount,$output_currency,$input_amount,$input_currency,$label,$description,$TxHash";

    say $new_header_line;

    while(my $row = <$fh_csv>) {
	chomp $row;
	my $label;

	next if $row =~ /LockingTermDeposit/;
	next if $row =~ /UnlockingTermDeposit/;
	next if $row =~ /TransferIn/;
	next if $row =~ /TransferOut/;

	my ($nexo_transaction_id,$type,$input_currency,$input_amount,$output_currency,$output_amount,$usd_equivalent,$details,$outstanding_loan,$nexo_date_time) = split /,/, $row;

	# Map Nexo names to Koinly names
	my $sent_amount       = $output_amount;
	my $sent_currency     = $output_currency;
	my $received_amount   = $input_amount;
	my $received_currency = $input_currency;

	my ($description, $tx_hash);
	my ($description,$tx_hash) = get_description($type, $details, $nexo_transaction_id);
	my $date_time_with_tz = date_with_timezone($nexo_date_time);

	if (($type eq 'Deposit') or	($type eq 'Exchange Cashback')) {
	    ($sent_amount, $sent_currency)  = ('', '');
	} elsif ($type eq 'Withdrawal') {
	    ($received_currency, $received_amount) = ('', '');
	} elsif (($type eq 'Interest') or ($type eq 'FixedTermInterest')) {
	    $label = 'Loan Interest';
	    ($sent_amount, $sent_currency)  = ('', '');
	} elsif ($type eq 'TransferIn') {
	    # ($output_currency, $output_amount)  = ('', '');
	} elsif ($type eq 'TransferOut') {
	    # ($input_currency, $input_amount)  = ('', '');
	}
	if ( $type eq 'Exchange' ) {
	    ($sent_amount,$sent_currency,$received_amount,$received_currency) = fix_exchange_transaction($input_currency,$input_amount,$output_currency,$output_amount);
	    say $fh_exchanges_wrong_inputs "$nexo_transaction_id: Sent  ?  $sent_currency received $received_amount $received_currency on $date_time_with_tz";
	    if ($USE_EXCHANGE) {
		$sent_amount = get_sent_value_from_exchanges_file($nexo_transaction_id);
	    }
	}
	say "$date_time_with_tz,$sent_amount,$sent_currency,$received_amount,$received_currency,$label,$tx_hash,$description,$nexo_transaction_id,$type";
    }

    sub fix_exchange_transaction {
	# NXTyuZmuWxgW2: Sent 15,999.079254 USDC received 5.31763788 ETH on 2022-03-23 22:26:32+01:00
	# NXTyuZmuWxgW2,Exchange,USDC/ETH,ETH 5.31763788,ETH,5.31763788,$15822.73,approved / Exchange USD Coin to Ether,$0.00,2022-03-23 22:26:32
	my ($input_currency,$input_amount,$output_currency,$output_amount) = @_;
	my ($sent_amount,$sent_currency,$received_amount,$received_currency);
	$sent_amount = $input_amount; # it's garabage as of 2022-04-04T19:56:12-07:00, need to hand edit sent amount
	$sent_amount = ' ? ';
	$sent_currency = $input_currency; # jumbled up, e.g. 'USDC/ETH'
	$sent_currency =~ s/\/\w+//; # fix the jumbled value, e.g. 'USDC/ETH' => 'USDC'
	$received_amount = $output_amount; # OK data from Nexo 2022-04-04
	$received_currency = $output_currency; # OK data from Nexo 2022-04-04
	return ($sent_amount,$sent_currency,$received_amount,$received_currency);
    }

    sub get_sent_value_from_exchanges_file {
	my ($nexo_transaction_id, $input_amount) = @_;
	foreach my $transaction (@exchange_transactions) {
	    $transaction =~ s/\,//g;
	    if ($transaction =~ /$nexo_transaction_id/) {
		# $transaction =~ /exchanged\s+([+-]?([0-9]+\.?[0-9]*|\.[0-9]+))/;
		if ($transaction =~ /Sent\s+(\d+\.?\d+)\s+/) {
		    $input_amount = $1;
		    return $input_amount;
		} else {
		    return $input_amount;
		}
	    }
	}
    }    

    sub date_with_timezone {
	my $nexo_date = shift;
	return $nexo_date . '+01:00'
    }

    sub get_description {
	my ($type, $details, $nexo_transaction_id) = @_;
	my $tx_hash = '';
	# approved / 
	my $description = $details;
	$description =~ s/(^approved \/ )//;
	if ($1 ne 'approved / ') {
	    warn "warning: not approved";
	    say $fh_warnings "$nexo_transaction_id not approved";
	}
	if ($type eq 'Deposit') {
	    unless ($description =~ /(\s)/) {
		if (length($description) > 16) {
		    $tx_hash = $description;
		    $description = '';
		}
	    }
	}
	return ($description,$tx_hash);
    }
  #+end_src
